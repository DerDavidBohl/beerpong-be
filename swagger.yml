basePath: /api/v1
swagger: '2.0'
info:  
  version: 1.0.0
  title: Beerpong
  description: Backend for the Beerpong Web App.
  termsOfService: terms
  contact:
    name: David Bohl
    url: https://github.com/DerDavidBohl/beerpong-be
    email: david@bohl24.de
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
securityDefinitions:
  Bearer:
    type: apiKey
    name: authorization
    in: header
security:
  - Bearer: []
paths:
  /login:
    post:
      security: []
      parameters:
        - $ref: '#/parameters/LoginDataInBody'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
  /athletes:
    get:
      description: Gets All Athletes With Id
      parameters:
        - $ref: '#/parameters/Athlete Name in Query'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Athlete with Id'
        400:
          description: Bad Request
    post:
      description: Creates A new Athletes
      parameters:
        - $ref: '#/parameters/Athlete in Body'
      responses:
        201:
          description: Created
          headers:
            location:
              type: string
              description: ID of the Created Object         
        400:
          description: Bad Request
  /athletes/{athleteId}:
    parameters:
      - $ref: '#/parameters/AthleteId in Path'
    get:
      description: Gets a Single Athlete
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Athlete'
        404:
          description: Athlete not found
    put:
      description: Updates a Athlete
      responses:
        204:
          description: OK
        400:
          description: Bad Request
        404:
          description: Athlete not found
      parameters:
        - $ref: '#/parameters/Athlete in Body'
    delete:
      description: Deletes an Athlete
      responses:
        204:
          description: Athlete deleted - No Content
        404:
          description: Athlete not
  /games:
    get:
      description: Gets all Games
      responses:
        200:
          description: All Games
          schema:
            type: array
            items:
              $ref: '#/definitions/Game with Id'        
        400:
          description: Bad Request
    post:
      description: Creates a new Game
      parameters:
        - $ref: '#/parameters/Game in Body'
      responses:
        201:
          description: Created new Game
          headers:
            location:
              type: string
              description: ID of the Created Object
        400:
          description: Bad Request
  /games/{gameId}:
    parameters:
      - $ref: '#/parameters/GameId in Path'
    get:
      description: Gets a specific Game
      responses:
        200:
          description: A specific Game
          schema:
            $ref: '#/definitions/Game'
        404:
          description: Game not found
    put:
      parameters:
        - $ref: '#/parameters/Game in Body'
      description: Updates a specific Game
      responses:
        204:
          description: Successfully updated specific Game
        404:
          description: Game not found
    delete:
      description: Deletes a specific Game
      responses:
        204:
          description: Game does not exist any more.
        404:
          description: Game not found
  /rankings/athletes:
    get:
      parameters:
        - $ref: '#/parameters/SeasonId in Query'
      responses:
        200:
          description: Ranking for Athletes
          schema:
            $ref: '#/definitions/Ranking'
      deprecated: false
  /rankings/teams:
    get:
      parameters:
        - $ref: '#/parameters/SeasonId in Query'
      responses:
        200:
          description: Ranking for Athletes
          schema:
            $ref: '#/definitions/Ranking'
      deprecated: false
  /seasons:
    get:
      parameters:
        - $ref: '#/parameters/Season Name in Query'
      description: Gets all Seasons matching the Query
      responses:
        200:
          description: All Seasons
          schema:
            type: array
            items:
              $ref: '#/definitions/Season with Id'
        400:
          description: Bad Request
    post:
      description: Creates a new Season
      parameters:
        - $ref: '#/parameters/Season in Body'
      responses:
        201:
          description: Created a new Season
          headers:
            location:
              type: string
              description: ID of the Created Object
  /seasons/{seasonId}:
    parameters:
      - $ref: '#/parameters/SeasonId in Path'
    get:
      description: Gets a specific Season
      responses:
        204:
          description: OK
        404:
          description: Not found
    put:
      description: Updates a specific Season
      parameters:
        - $ref: '#/parameters/Season in Body'
      responses:
        204:
          description: Success
        404:
          description: Not Found
    delete:
      description: Deletes a specific Season
      responses:
        204:
          description: Success
        404:
          description: Not found

  /teams:
    get:
      description: Gets all Teams
      parameters:
        - $ref: '#/parameters/Team Name in Query'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Team' #TODO: Use Correct Ref
        400:
          description: Bad Request
    post:
      description: Creates a new Team
      responses:
        201:
          description: Created
          headers:
            location:
              type: string
              description: ID of the Created Object
      parameters:
        - $ref: '#/parameters/Team in Body'
  /teams/{teamId}:
    parameters:
      - $ref: '#/parameters/TeamId in Path'
    get:
      description: Gets a specific Team
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Team'
        404:
           description: Team not found
    put:
      description: Updates a specific Team
      parameters:
        - $ref: '#/parameters/Team in Body'
      responses:
        204:
          description: Updated
        400:
          description: Bad Request
        404:
          description: Team not found
    delete:
      description: Deletes a specific Team
      responses:
        204:
          description: Team deleted
        404:
          description: Team not found
  /teams/{teamId}/members:
    parameters:
      - $ref: '#/parameters/TeamId in Path'
    post:
      description: Adds a Member to a Team
      parameters:
        - $ref: '#/parameters/AthleteId in Body'
      responses:
        201:
          description: Created
        404:
          description: Team not found
        400:
          description: Bad Request
  /teams/{teamId}/members/{athleteId}:
    parameters:
      - $ref: '#/parameters/TeamId in Path'
      - $ref: '#/parameters/AthleteId in Path'
    delete:
      responses:
        204:
          description: Deleted Athlete from Members
        404:
          description: Team not Found
  /users:
    parameters:
      - $ref: '#/parameters/TokenInQuery'
      - $ref: '#/parameters/RegistrateUser'
    post:
      security: []
      responses:
        201:
          description: Created
  /users/invite:
    post:
      parameters:
        - $ref: '#/parameters/InviteMailInBody'
      responses:
        200:
          description: OK
  /users/current:
    get:
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
parameters:
  Game in Body:
    name: game
    in: body
    schema:
      $ref: '#/definitions/Game with refereces'
  GameId in Path:
    name: gameId
    in: path
    type: string
    description: Id of a Game
    required: true
  SeasonId in Path:
    name: seasonId
    in: path
    type: string
    description: Id of a Season
    required: true
  Season Name in Query:
    name: name
    in: query
    type: string
    description: Name of a Season
  SeasonId in Query:
    name: seasonId
    in: query
    type: string
    description: Id of a Season
  Game Team in Query:
    name: team
    in: query
    type: integer
    description: Team of a Game
  TokenInQuery:
    name: token
    in: query
    type: string
    required: true
  LoginDataInBody:
    name: login
    in: body
    description: email and Password
    schema:
      $ref: '#/definitions/LogIn'
  Season in Body:
    name: season
    in: body
    schema:
      $ref: '#/definitions/Season'
  AthleteId in Path:
    name: athleteId
    in: path
    type: string
    description: Id of an Athlete
    required: true
  AthleteId in Body:
    in: body
    description: Id of an Athlete
    schema:
     $ref: '#/definitions/Athlete with Id only'
    name: athleteId
  Athlete Name in Query:
    name: name
    in: query
    type: string
    description: Name Filter for Athlete
  Athlete in Body:
    in: body
    schema:
      $ref: '#/definitions/Athlete'
    required: true
    name: athlete
  Team in Body:
    in: body
    name: team
    schema:
      $ref: '#/definitions/Team with references'
  TeamId in Path:
    name: teamId
    in: path
    type: string
    description: Id of a Team
    required: true
  Team Name in Query:
    name: name
    in: query
    type: string
    description: Name of a Team
    required: false
  RegistrateUserInBody:
    in: body
    name: user
    schema:
      $ref: '#/definitions/RegistrateUser'
  InviteMailInBody:
    in: body
    name: email
    schema:
      $ref: '#/definitions/Email'
definitions:
  Game:
    type: object
    properties:
      date:
        type: string
        format: date-time
      scoreTeam1:
        type: integer
      scoreTeam2:
        type: integer
      season:
        $ref: '#/definitions/Season with Id'
      team1:
        $ref: '#/definitions/Team with Id'
      team2:
        $ref: '#/definitions/Team with Id'
      athletesTeam1:
        type: array
        items:
          $ref: '#/definitions/Athlete with Id'
      athletesTeam2:
        type: array
        items:
          $ref: '#/definitions/Athlete with Id'
  Game with refereces:
    type: object
    properties:
      date:
        type: string
        format: date-time
      scoreTeam1:
        type: integer
      scoreTeam2:
        type: integer
      season:
        type: string
        default: null
      team1:
        type: string
        default: null
      team2:
        type: string
        default: null
      athletesTeam1:
        type: array
        default: []
        items:
          type: string
      athletesTeam2:
        type: array
        default: []
        items:
          type: string
  Game with Id:
    type: object
    allOf: 
      - $ref: '#/definitions/Game'
    properties:
     id:
        type: string
  LogIn:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  #TODO: Add missung properties
  Ranking:
    type: object
    properties:
      entity:
        type: object
        properties:
          name:
            type: string
          id:
            type: string
      rank:
        type: integer
      amountOfGame:
        type: integer
      amountOfVictories:
        type: integer
      amountOfDefeats:
        type: integer
      ownHits:
        type: integer
      hostileHits:
        type: integer
      
  Season:
    type: object
    properties:
      from:
        type: string
        format: date
      to:
        type: string
        format: date
      name:
        type: string
  Season with Id:
    type: object
    allOf:
      - $ref: '#/definitions/Season'
    properties:
      id:
        type: string
  Team:
    type: object
    properties:
      name:
        type: string
      members:
        type: array
        items:
          $ref: '#/definitions/Athlete with Id'
  Team with references:
    type: object
    properties:
      name:
        type: string
      members:
        type: array
        items:
          type: string
  Team with Id:
    type: object
    allOf:
      - $ref: '#/definitions/Team'
    properties:
      id:
        type: string
  Athlete:
    type: object
    properties:
      name:
        type: string
  Athlete with Id:
    type: object
    properties:
      name:
        type: string
      id:
        type: string
  Athlete with Id only:
    type: object
    properties: 
      id:
        type: string
  Email:
    type: object
    properties:
      email:
        type: string
  RegistrateUser:
    type: object
    properties:
      email:
        type: string
      name: 
        type: string
      password:
        type: string
  User:
    type: object
    properties:
      email:
        type: string
      name: 
        type: string